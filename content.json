{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"SpringCloud系列-雪崩","slug":"SpringCloud系列-雪崩","date":"2021-08-09T06:56:05.000Z","updated":"2021-08-09T06:59:24.887Z","comments":true,"path":"2021/08/09/SpringCloud系列-雪崩/","link":"","permalink":"http://example.com/2021/08/09/SpringCloud%E7%B3%BB%E5%88%97-%E9%9B%AA%E5%B4%A9/","excerpt":"","text":"雪崩效应 断路器 服务容错常见解决方案 超时 限流 仓壁模式 断路器模式 使用Sentinel实现容错 轻量级的流量控制,熔断降级 Java 库 1234&lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;&lt;/dependency&gt; 在SpringBoot整合 sentinel 后 , 会暴露出/actuator/sentinel","categories":[],"tags":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://example.com/tags/SpringCloud/"}]},{"title":"SpringCloud系列-网关","slug":"SpringCloud系列-网关","date":"2021-08-09T06:56:00.000Z","updated":"2021-08-09T06:59:19.097Z","comments":true,"path":"2021/08/09/SpringCloud系列-网关/","link":"","permalink":"http://example.com/2021/08/09/SpringCloud%E7%B3%BB%E5%88%97-%E7%BD%91%E5%85%B3/","excerpt":"","text":"Spring Cloud Gateway 是Spring Cloud的网关（第二代），未来会取代Zuul（第一代） 基于Netty、Reactor以及WebFlux构建 优点：性能强劲，功能强大 内置了很多实用的功能，比如转发、监控、限流等，设计优雅，容易扩展 缺点：依赖Netty与WebFlux，不是Servlet编程模型，有一定的适应成本。不能在Servet容器下工作，也不能构建成WAR包。不支持SpringBoot 1.X 简单使用pom.xml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.1.5.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.huang&lt;/groupId&gt; &lt;artifactId&gt;gatewaay&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;gatewaay&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Greenwich.SR1&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt; &lt;version&gt;0.9.0.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; application.yml 123456789101112131415161718192021server: port: 8040spring: application: name: gateway_huang cloud: nacos: discovery: server-addr: 81.70.229.229:8848 gateway: discovery: locator: enabled: truemanagement: endpoints: web: exposure: include: health endpoint: health: show-details: always 在gateway启动后，可以访问gateway的服务，然后拼接nacos上注册的微服务名的方式来访问微服务，例如现在有nacos上有userCenter微服务，那么就可以localhost:8040/userCenter/user/getByID/1这样访问 核心概念Route（路由）： Spring Cloud Gateway的基础元素，可简单理解为一条转发的规则。包含: ID 目标URL Predicate集合以及Filter集合。 Predicate（谓词） 即java.util.function.Predicate，Spring Cloud Gateway使用Predicate实现路由的匹配条件 Filter（过滤器） 修改请求及响应 Spring Cloud Gateway架构图 方框内的就是SpringCloud Gateway Gateway Client：指外部访问接口 Gateway Handler Mapping： 对判断请求的路径进行处理，寻找匹配的路由 Gateway Web Handler：查找该路由所配置的filter，然后依次执行过滤器 路由谓词工厂 使用详解：https://www.imooc.com/article/290804 自定义Predicate也比较简单，参考源码即可 过滤器工厂详解Spring Cloud Gateway-过滤器工厂详解（GatewayFilter Factories）：http://www.imooc.com/article/290816 调试的技巧： 断点打在 org.springframework.cloud.gateway.filter.NettyRoutingFilter#filter ，就可以调试Gateway转发的具体细节了 添加如下配置，可观察到一些请求细节： 123456logging: level: org.springframework.cloud.gateway: trace org.springframework.http.server.reactive: debug org.springframework.web.reactive: debug reactor.ipc.netty: debug 全局过滤器Spring Cloud Gateway-全局过滤器（Global Filters）：https://www.imooc.com/article/290821 SpringCloud与Sentinel的整合？？？Spring Cloud Gateway的监控https://www.imooc.com/article/290822 介绍了SpringCloud Gateway在集成actutor的一些端点 SpringCloudGateway调试排错技巧https://www.imooc.com/article/290824 过滤器执行顺序全局过滤器是有Order的，Order越小越先执行 局部过滤器也是一样，Order越小的越先执行 这种情况下 执行顺序是，先执行 default-filters下的AddRespolnseHeader再执行routes下的AddRespolnseHeader，再执行default-filters下的PrefixPath，再执行routes吓得PreLog，再执行routes下的AddRequestHeader。 SpringCloudGateway的限流https://www.imooc.com/article/290828","categories":[],"tags":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://example.com/tags/SpringCloud/"}]},{"title":"SpringCloud系列-sentinel","slug":"SpringCloud系列-sentinel","date":"2021-08-09T06:55:54.000Z","updated":"2021-08-09T06:59:09.970Z","comments":true,"path":"2021/08/09/SpringCloud系列-sentinel/","link":"","permalink":"http://example.com/2021/08/09/SpringCloud%E7%B3%BB%E5%88%97-sentinel/","excerpt":"","text":"Sentinel系统规则源码位置：com.alibaba.csp.sentinel.slots.system.SystemRuleManager#checkSystem Loadlinux系统下可以通过uptime命令查看系统负载，load averages：1.97 2.21 2.38，第一个参数代表一分钟内的系统平均负载，第二个参数代表五分钟以内的系统平均负载，第三个参数代表十五分钟以内的系统平均负载，也被分别称为 load1 load5 load 15 当系统load1(1分钟的load)超过有阈值，且并发线程数超过系统容量时触发，建议设置为CPU核心数 * 2.5。 备注：仅对Linux/Unix-like机器生效，系统容量 = maxQps * minRt ，maxQps为秒级统计出来的最大QPS，minRt：秒级统计出来的最小响应时间。 RT所有入口流量的平均RT达到阈值触发 线程数所有入口流量的并发线程数达到阈值 入口QPS所有入口流量QPS达到阈值触发 使用代码进行配置https://www.imooc.com/article/289345 sentinel控制台配置项 Sentinel APIspring.cloud.sentinel.filter.enabled=false 关闭掉对Spring MVC端点的保护，可以理解为 为false时，不会扫描接口url展示在sentinel 控制台上, 但是通过api的方式可以展示在控制台上 12345678910111213141516171819202122232425@GetMapping(&quot;/test-sentinel&quot;)public String testSentinel(String a) &#123; Entry entry = null; String resourceName = &quot;test-sentinel-api&quot;; ContextUtil.enter(resourceName, &quot;testService&quot;); try &#123; entry = SphU.entry(resourceName); if (StringUtils.isBlank(a)) &#123; throw new IllegalArgumentException(); &#125; &#125; catch (BlockException e) &#123; return &quot;限流或者降级了&quot;; &#125; catch (IllegalArgumentException e) &#123; Tracer.trace(e); return &quot;非法参数&quot;; &#125; finally &#123; if (entry != null) &#123; entry.close(); &#125; ContextUtil.exit(); &#125; return &quot;success&quot;;&#125; 在调用上面接口后，控制台只会显示这么一条数据 需要注意的时，在使用异常比例，异常数降级时，所指的异常默认是BlockException，需要指定其他异常需要调用Tracer.trace(e) 而ContextUtil的enter和exit控制的是流控规则的针对来源。 @SentinelResource详解属性详解 https://www.imooc.com/article/289384 使用注解与上面使用sentinel api实现上述不同点： Api方式实现，捕获除BlockException之外的异常需要使用Tracer.trace(),而使用注解的方式默认是捕获Throwable，Class&lt;? extends Throwable&gt;[] exceptionsToTrace() default &#123;Throwable.class&#125;; 注解的方式不支持 ContextUtil.enter()这种功能 12345678910111213141516171819@GetMapping(&quot;/test-sentinel-resource&quot;)@SentinelResource(value = &quot;test-sentinel-resource&quot;, blockHandler = &quot;blockHandler&quot;, fallback = &quot;fallbackHandler&quot;)public String testSentinelResource(String param) &#123; if (StringUtils.isBlank(param)) &#123; throw new IllegalArgumentException(&quot;param is blank&quot;); &#125; return &quot;success&quot;;&#125;public String blockHandler(String param) &#123; log.error(&quot;限流或降级&quot;); return &quot;被限流或者降级了&quot;;&#125;public String fallbackHandler(String param, Throwable ex) &#123; log.error(&quot;被降级 : &#123;&#125;&quot;, ex.getMessage()); return &quot;被降级了&quot;;&#125; 值得注意的是，在配置降级规则后 fallback回调函数中的异常为java.lang.IllegalArgumentException: param is blank blockHandler回调函数com.alibaba.csp.sentinel.slots.block.degrade.DegradeException RestTemplate整合Sentinel注解：@SentinelRestTemplate 整合的开关：resttemplate.sentinel.enabled默认为true 相关源码com.alibaba.cloud.sentinel.custom.SentinelBeanPostProcessor Feign整合Sentinel整合的开关：feign.sentinel.enabled默认为false 123@FeignClient(name = &quot;userCenter&quot;, path = &quot;user&quot;, configuration = UserCenterFeignClientConfig.class, fallbackFactory = UserCenterFeignClientFallBackFactory.class) 需要注意的是 The fallback factory must be a valid spring bean. 123456789101112131415161718@Componentpublic class UserCenterFeignClientFallBackFactory implements FallbackFactory&lt;UserCenterFeignClient&gt; &#123; @Override public UserCenterFeignClient create(Throwable cause) &#123; cause.printStackTrace(); return new UserCenterFeignClient() &#123; @Override public UserDto getByID(Integer id) &#123; return null; &#125; @Override public String paramTest(TestGetParam getParams, TestPostParam postParams) &#123; return &quot;备用信息&quot;; &#125; &#125;; &#125;&#125; 需要注意的是这里的fallback其实与@SentinelResource的fallback类似，在@SentinelResource未指定blockHandler的情况下，行为一致，相比而言@FeignClient缺少单独的处理限流的类，不过可以通过判断FallbackFactory中的Throwable类型来判断，如果为com.alibaba.csp.sentinel.slots.block.flow.FlowException则为限流，此处可利用SpringBoot的全局异常处理机制实现限流抛出统一信息，降级给出自定义信息 Sentinel扩展Api 目前使用的spring-cloud-alibaba2.2.5版本的 相关源码已不在CommonFilter中，在com.alibaba.csp.sentinel.adapter.spring.webmvc.AbstractSentinelInterceptor 配置项 : https://www.imooc.com/article/289562","categories":[],"tags":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://example.com/tags/SpringCloud/"}]},{"title":"SpringCloud系列-feign","slug":"SpringCloud系列-feign","date":"2021-08-09T06:55:49.000Z","updated":"2021-08-09T06:58:57.079Z","comments":true,"path":"2021/08/09/SpringCloud系列-feign/","link":"","permalink":"http://example.com/2021/08/09/SpringCloud%E7%B3%BB%E5%88%97-feign/","excerpt":"","text":"Feign Netflix开源的声明书HTTP客户端 Feign组件 Feign.Builder : 构建每一个FeignClient Client :需要注意的是 feign.Client.default未使用连接池, 而LoadBalancerFeignClient在默认情况下可以看做是具有负载均衡功能的FeignClient 自定义Feign日志级别 Java配置类的方式指定通过注解在FeignClient的@FeignClient的configuration属性中所配置Logger.Level类进行指定 1234@FeignClient(name = &quot;userCenter&quot;, path = &quot;user&quot;, configuration = UserCenterFeignClientConfig.class)public interface UserCenterFeignClient &#123; ...&#125; UserCenterFeignClientConfig.java 1234567public class UserCenterFeignClientConfig &#123; @Bean public Logger.Level level() &#123; return Logger.Level.FULL; &#125;&#125; 配置属性的方式进行指定1feign.client.config.userCenter.logger-level = full Feign的全局配置 Java代码方式 配置属性方式 Java代码方式1@EnableFeignClients(defaultConfiguration = CustomDefaultFeignClientConfig.class) 123456public class CustomDefaultFeignClientConfig &#123; @Bean public Logger.Level level() &#123; return Logger.Level.FULL; &#125;&#125; 配置属性方式1feign.client.config.default.logger-level = full 支持的配置项Java代码方式支持的 配置属性方式支持的 Ribbon配置与Feign配置 Feign性能优化 连接池 日志级别 连接池1234&lt;dependency&gt; &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt; &lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;&lt;/dependency&gt; 1feign.httpclient.enabled=true Feign常见问题总结","categories":[],"tags":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://example.com/tags/SpringCloud/"}]},{"title":"SpringCloud系列-ribbon","slug":"SpringCloud系列-ribbon","date":"2021-08-09T06:55:37.000Z","updated":"2021-08-09T06:59:04.102Z","comments":true,"path":"2021/08/09/SpringCloud系列-ribbon/","link":"","permalink":"http://example.com/2021/08/09/SpringCloud%E7%B3%BB%E5%88%97-ribbon/","excerpt":"","text":"Ribbon 客户端负载均衡器 Ribbon的依赖在nacos的依赖中已经存在 简单使用： 1234&lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;&lt;/dependency&gt; 注解@LoadBalanced 12345@Bean@LoadBalancedpublic RestTemplate restTemplate() &#123; return new RestTemplate();&#125; 使用RestTemplate进行访问 1restTemplates.getForObject(&quot;http://userCenter/user/getByID/&#123;id&#125;&quot;, String.class, id); userCenter为service名称，RestTemplate在进行访问时对其进行替换来实现客户端负载均衡 ​ Ribbon内置的负载均衡规则 默认的是ZoneAvoidanceRule,Zone是机房的含义,在没有机房设置的情况下,相当于RoundRobinRule 细粒度配置自定义 可以根据service的不同设置不同的规则 Java代码配置 配置属性配置 Java代码配置RibbonUserCenterConfig.java 123@RibbonClient(name = &quot;userCenter&quot;,configuration = RibbonConfiguration.class)public class RibbonUserCenterConfig &#123;&#125; RibbonConfiguration.java 12345678@Configurationpublic class RibbonConfiguration &#123; @Bean public IRule randomRule() &#123; return new RandomRule(); &#125;&#125; @RibbonClient的name属性为服务名，RibbonConfiguration属性指的是调用该服务时所使用的配置类 需要注意的是配置Ribbon组件的配置类不能被Spring容器扫描到，否则会成为全局的一个配置类，这是个父子上下文的问题。在实际运用中，应尽量避免上下文重叠的情况出现， 实现ribbon全局配置 123@RibbonClients(defaultConfiguration = RibbonConfiguration.class)public class RibbonUserCenterConfig &#123;&#125; 配置属性方式 饥饿加载默认情况下，Ribbon是懒加载的。即RestTemplate第一次访问`http://userCenter/user/geByID/1`时才会创建一个userCenter的RibbonClient。 通过下面配置打开饥饿加载 123ribbon.eager-load.enabled=true#为哪些client打开饥饿加载ribbon.eager-load.clients=userCenter,service1 **","categories":[],"tags":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://example.com/tags/SpringCloud/"}]}],"categories":[],"tags":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://example.com/tags/SpringCloud/"}]}