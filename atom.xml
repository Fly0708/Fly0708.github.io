<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-16T02:59:37.991Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>容器类</title>
    <link href="http://example.com/2021/08/16/%E5%AE%B9%E5%99%A8%E7%B1%BB/"/>
    <id>http://example.com/2021/08/16/%E5%AE%B9%E5%99%A8%E7%B1%BB/</id>
    <published>2021-08-16T02:59:03.000Z</published>
    <updated>2021-08-16T02:59:37.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="待："><a href="#待：" class="headerlink" title="待："></a>待：</h2><ul><li>HashMap多线程的死循环问题，以及ConcurrentHashMap 是怎么解决的</li><li>HashMap源码重新阅读</li><li>Cas锁</li></ul><h2 id="记："><a href="#记：" class="headerlink" title="记："></a>记：</h2><h3 id="ConcurrentHashMap-和-Hashtable-的区别"><a href="#ConcurrentHashMap-和-Hashtable-的区别" class="headerlink" title=" ConcurrentHashMap 和 Hashtable 的区别"></a><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/collection/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98?id=_149-concurrenthashmap-%E5%92%8C-hashtable-%E7%9A%84%E5%8C%BA%E5%88%AB"> ConcurrentHashMap 和 Hashtable 的区别</a></h3><ul><li>底层数据结构不同， ConcurrentHashMap在JDK1.8的时候跟HashMap一样，同样采用了 数组 + 链表/红黑二叉树的。Hashtable采用了数组 + 链表的结构。</li><li>实现线程安全的方式，Hashtable使用<code>synchronized</code>来保证线程安全。 ConcurrentHashMap 在JDK1.8之前，采用对桶数组分隔片那段的操作，每一把锁只锁一部分数据。多线程访问容器里不同数据段的数据就不会发生锁竞争。而在JDK1.8的时候，抛弃了<code>segment</code>的概念，而是采用Node数组+链表+红黑树的数据结构来实现，并发控制使用<code>synchronized</code>和CAS实现。<code>synchronized</code> 只锁定当前链表或红黑二叉树的首节点，这样只要 hash 不冲突，就不会产生并发，效率又提升 N 倍。</li></ul><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>cas 的 ABA问题可以通过 <code>AtomicStampedReference </code> 解决</p><p>参考：<a href="https://objcoding.com/2018/11/29/cas/">Java并发之CAS原理分析</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;待：&quot;&gt;&lt;a href=&quot;#待：&quot; class=&quot;headerlink&quot; title=&quot;待：&quot;&gt;&lt;/a&gt;待：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;HashMap多线程的死循环问题，以及ConcurrentHashMap 是怎么解决的&lt;/li&gt;
&lt;li&gt;HashMap源码重新</summary>
      
    
    
    
    
    <category term="java容器 CAS" scheme="http://example.com/tags/java%E5%AE%B9%E5%99%A8-CAS/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列-雪崩</title>
    <link href="http://example.com/2021/08/09/SpringCloud%E7%B3%BB%E5%88%97-%E9%9B%AA%E5%B4%A9/"/>
    <id>http://example.com/2021/08/09/SpringCloud%E7%B3%BB%E5%88%97-%E9%9B%AA%E5%B4%A9/</id>
    <published>2021-08-09T06:56:05.000Z</published>
    <updated>2021-08-09T06:59:24.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="雪崩效应"><a href="#雪崩效应" class="headerlink" title="雪崩效应"></a>雪崩效应</h2><p><img src="https://i.loli.net/2021/06/15/LXUCMRldrF4wVuG.png" alt="image-20210615202323096"></p><h2 id="断路器"><a href="#断路器" class="headerlink" title="断路器"></a>断路器</h2><p><img src="https://i.loli.net/2021/06/15/XDaTZc6YeqlnLSm.png" alt="image-20210615205834618"></p><h2 id="服务容错常见解决方案"><a href="#服务容错常见解决方案" class="headerlink" title="服务容错常见解决方案"></a>服务容错常见解决方案</h2><ul><li>超时</li><li>限流</li><li>仓壁模式</li><li>断路器模式</li></ul><h2 id="使用Sentinel实现容错"><a href="#使用Sentinel实现容错" class="headerlink" title="使用Sentinel实现容错"></a>使用Sentinel实现容错</h2><blockquote><p>轻量级的流量控制,熔断降级 Java 库</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在SpringBoot整合 sentinel 后 , 会暴露出<code>/actuator/sentinel</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;雪崩效应&quot;&gt;&lt;a href=&quot;#雪崩效应&quot; class=&quot;headerlink&quot; title=&quot;雪崩效应&quot;&gt;&lt;/a&gt;雪崩效应&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/06/15/LXUCMRldrF4wVuG.png&quot; a</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://example.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列-网关</title>
    <link href="http://example.com/2021/08/09/SpringCloud%E7%B3%BB%E5%88%97-%E7%BD%91%E5%85%B3/"/>
    <id>http://example.com/2021/08/09/SpringCloud%E7%B3%BB%E5%88%97-%E7%BD%91%E5%85%B3/</id>
    <published>2021-08-09T06:56:00.000Z</published>
    <updated>2021-08-09T06:59:19.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h1><blockquote><p>是Spring Cloud的网关（第二代），未来会取代Zuul（第一代）</p><p>基于Netty、Reactor以及WebFlux构建</p></blockquote><p>优点：性能强劲，功能强大 内置了很多实用的功能，比如转发、监控、限流等，设计优雅，容易扩展</p><p>缺点：依赖Netty与WebFlux，不是Servlet编程模型，有一定的适应成本。不能在Servet容器下工作，也不能构建成WAR包。不支持SpringBoot 1.X</p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.huang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gatewaay<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>gatewaay<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8040</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway_huang</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">81.70</span><span class="number">.229</span><span class="number">.229</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">health</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>在gateway启动后，可以访问gateway的服务，然后拼接nacos上注册的微服务名的方式来访问微服务，例如现在有nacos上有userCenter微服务，那么就可以<code>localhost:8040/userCenter/user/getByID/1</code>这样访问</p><p><img src="https://i.loli.net/2021/07/11/ReDwNi9QWmgdvyC.png" alt="image-20210711170922628"></p><p><img src="C:\Users\huangSir\AppData\Roaming\Typora\typora-user-images\image-20210711171312220.png" alt="image-20210711171312220"></p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="Route（路由）："><a href="#Route（路由）：" class="headerlink" title="Route（路由）："></a>Route（路由）：</h3><ul><li>Spring Cloud Gateway的基础元素，可简单理解为一条转发的规则。包含: ID 目标URL Predicate集合以及Filter集合。</li></ul><h3 id="Predicate（谓词）"><a href="#Predicate（谓词）" class="headerlink" title="Predicate（谓词）"></a>Predicate（谓词）</h3><ul><li>即<code>java.util.function.Predicate</code>，Spring Cloud Gateway使用Predicate实现路由的匹配条件</li></ul><h3 id="Filter（过滤器）"><a href="#Filter（过滤器）" class="headerlink" title="Filter（过滤器）"></a>Filter（过滤器）</h3><ul><li>修改请求及响应</li></ul><p> <img src="https://i.loli.net/2021/07/11/k3v2hz5D6JEOHQ1.png" alt="image-20210711185239608"></p><h3 id="Spring-Cloud-Gateway架构图"><a href="#Spring-Cloud-Gateway架构图" class="headerlink" title="Spring Cloud Gateway架构图"></a>Spring Cloud Gateway架构图</h3><p><img src="https://i.loli.net/2021/07/11/FzwNlZtqJ3Dna6d.png" alt="image-20210711190550914"></p><p>方框内的就是SpringCloud Gateway</p><p>Gateway Client：指外部访问接口</p><p> Gateway Handler Mapping： 对判断请求的路径进行处理，寻找匹配的路由</p><p>Gateway Web Handler：查找该路由所配置的filter，然后依次执行过滤器</p><p><img src="https://i.loli.net/2021/07/11/75TKaynP1LN6uFe.png" alt="image-20210711191113270"></p><h2 id="路由谓词工厂"><a href="#路由谓词工厂" class="headerlink" title="路由谓词工厂"></a>路由谓词工厂</h2><p><img src="https://i.loli.net/2021/07/11/j3k6U7DoxquG4bd.png" alt="image-20210711191604343"></p><p>使用详解：<a href="https://www.imooc.com/article/290804">https://www.imooc.com/article/290804</a></p><p>自定义Predicate也比较简单，参考源码即可</p><h2 id="过滤器工厂详解"><a href="#过滤器工厂详解" class="headerlink" title="过滤器工厂详解"></a>过滤器工厂详解</h2><p>Spring Cloud Gateway-过滤器工厂详解（GatewayFilter Factories）：<a href="http://www.imooc.com/article/290816">http://www.imooc.com/article/290816</a></p><p>调试的技巧：</p><ul><li><p>断点打在 <code>org.springframework.cloud.gateway.filter.NettyRoutingFilter#filter</code> ，就可以调试Gateway转发的具体细节了</p></li><li><p>添加如下配置，可观察到一些请求细节：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org.springframework.cloud.gateway:</span> <span class="string">trace</span></span><br><span class="line">    <span class="attr">org.springframework.http.server.reactive:</span> <span class="string">debug</span></span><br><span class="line">    <span class="attr">org.springframework.web.reactive:</span> <span class="string">debug</span></span><br><span class="line">    <span class="attr">reactor.ipc.netty:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://i.loli.net/2021/07/11/UhBFSwevytO7Qdr.png" alt="image-20210711221825874"></p><p><img src="https://i.loli.net/2021/07/11/6AFCkrxD8ZlGJ9w.png" alt="image-20210711221951701"></p><p><img src="https://i.loli.net/2021/07/11/ntdg2myYrfiEJDW.png" alt="image-20210711221913509"></p><p><img src="https://i.loli.net/2021/07/11/7fiuvM315G2bKJO.png" alt="image-20210711222026391"></p><p><img src="https://i.loli.net/2021/07/11/TOYht7rfyc84BMi.png" alt="image-20210711222203872"></p><h2 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h2><p>Spring Cloud Gateway-全局过滤器（Global Filters）：<a href="https://www.imooc.com/article/290821">https://www.imooc.com/article/290821</a></p><h2 id="SpringCloud与Sentinel的整合？？？"><a href="#SpringCloud与Sentinel的整合？？？" class="headerlink" title="SpringCloud与Sentinel的整合？？？"></a>SpringCloud与Sentinel的整合？？？</h2><h2 id="Spring-Cloud-Gateway的监控"><a href="#Spring-Cloud-Gateway的监控" class="headerlink" title="Spring Cloud Gateway的监控"></a>Spring Cloud Gateway的监控</h2><p><a href="https://www.imooc.com/article/290822">https://www.imooc.com/article/290822</a>   介绍了SpringCloud Gateway在集成actutor的一些端点</p><h2 id="SpringCloudGateway调试排错技巧"><a href="#SpringCloudGateway调试排错技巧" class="headerlink" title="SpringCloudGateway调试排错技巧"></a>SpringCloudGateway调试排错技巧</h2><p><a href="https://www.imooc.com/article/290824">https://www.imooc.com/article/290824</a></p><h2 id="过滤器执行顺序"><a href="#过滤器执行顺序" class="headerlink" title="过滤器执行顺序"></a>过滤器执行顺序</h2><p>全局过滤器是有Order的，Order越小越先执行</p><p>局部过滤器也是一样，Order越小的越先执行</p><p><img src="https://i.loli.net/2021/07/13/A6cPeTh8XZLsn5G.png" alt="image-20210713205227540"></p><p><img src="https://i.loli.net/2021/07/13/8ybBhEd2wzW5xf6.png" alt="image-20210713205242790"></p><p>这种情况下  执行顺序是，先执行 default-filters下的AddRespolnseHeader再执行routes下的AddRespolnseHeader，再执行default-filters下的PrefixPath，再执行routes吓得PreLog，再执行routes下的AddRequestHeader。</p><p><img src="https://i.loli.net/2021/07/13/XzuHnwRUGFmCrIV.png" alt="image-20210713210001633"></p><p><img src="https://i.loli.net/2021/07/13/IHoSFzTNsr1gMB7.png" alt="image-20210713210027923"></p><h2 id="SpringCloudGateway的限流"><a href="#SpringCloudGateway的限流" class="headerlink" title="SpringCloudGateway的限流"></a>SpringCloudGateway的限流</h2><p><a href="https://www.imooc.com/article/290828">https://www.imooc.com/article/290828</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Gateway&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Gateway&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Gateway&quot;&gt;&lt;/a&gt;Spring Cloud Gateway&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://example.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列-sentinel</title>
    <link href="http://example.com/2021/08/09/SpringCloud%E7%B3%BB%E5%88%97-sentinel/"/>
    <id>http://example.com/2021/08/09/SpringCloud%E7%B3%BB%E5%88%97-sentinel/</id>
    <published>2021-08-09T06:55:54.000Z</published>
    <updated>2021-08-09T06:59:09.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h1><h2 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h2><p>源码位置：com.alibaba.csp.sentinel.slots.system.SystemRuleManager#checkSystem</p><p><img src="https://i.loli.net/2021/06/20/DBWoMeHku348lsA.png" alt="image-20210620182013488"></p><h3 id="Load"><a href="#Load" class="headerlink" title="Load"></a>Load</h3><p>linux系统下可以通过<code>uptime</code>命令查看系统负载，load averages：1.97 2.21  2.38，第一个参数代表一分钟内的系统平均负载，第二个参数代表五分钟以内的系统平均负载，第三个参数代表十五分钟以内的系统平均负载，也被分别称为 load1 load5 load 15</p><ul><li>当系统load1(1分钟的load)超过有阈值，且并发线程数超过<strong>系统容量</strong>时触发，建议设置为CPU核心数 * 2.5。 备注：仅对Linux/Unix-like机器生效，系统容量 = maxQps * minRt ，maxQps为秒级统计出来的最大QPS，minRt：秒级统计出来的最小响应时间。</li></ul><h3 id="RT"><a href="#RT" class="headerlink" title="RT"></a>RT</h3><p>所有入口流量的平均RT达到阈值触发</p><h3 id="线程数"><a href="#线程数" class="headerlink" title="线程数"></a>线程数</h3><p>所有入口流量的并发线程数达到阈值</p><h3 id="入口QPS"><a href="#入口QPS" class="headerlink" title="入口QPS"></a>入口QPS</h3><p>所有入口流量QPS达到阈值触发</p><h2 id="使用代码进行配置"><a href="#使用代码进行配置" class="headerlink" title="使用代码进行配置"></a>使用代码进行配置</h2><p><a href="https://www.imooc.com/article/289345">https://www.imooc.com/article/289345</a></p><h2 id="sentinel控制台配置项"><a href="#sentinel控制台配置项" class="headerlink" title="sentinel控制台配置项"></a>sentinel控制台配置项</h2><p><img src="https://i.loli.net/2021/06/20/56H7pjPwfDYWeJV.png"></p><p><img src="https://i.loli.net/2021/06/20/emBdpX8rY1V5wIM.png" alt="image-20210620190104171"></p><p><img src="https://i.loli.net/2021/06/20/SWzkCADwEVxqb8P.png" alt="image-20210620190235331"></p><h2 id="Sentinel-API"><a href="#Sentinel-API" class="headerlink" title="Sentinel API"></a>Sentinel API</h2><p><code>spring.cloud.sentinel.filter.enabled=false</code> 关闭掉对Spring MVC端点的保护，可以理解为 为false时，不会扫描接口url展示在sentinel 控制台上, 但是通过api的方式可以展示在控制台上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/test-sentinel&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testSentinel</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">    Entry entry = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    String resourceName = <span class="string">&quot;test-sentinel-api&quot;</span>;</span><br><span class="line">    ContextUtil.enter(resourceName, <span class="string">&quot;testService&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        entry = SphU.entry(resourceName);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(a)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BlockException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;限流或者降级了&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">        Tracer.trace(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;非法参数&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">            entry.close();</span><br><span class="line">        &#125;</span><br><span class="line">        ContextUtil.exit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用上面接口后，控制台只会显示这么一条数据</p><p><img src="https://i.loli.net/2021/06/20/9ZD8TJmQFfStoAk.png" alt="image-20210620230716335"></p><p><img src="https://i.loli.net/2021/06/20/2UvIakiKMqLC3X8.png" alt="image-20210620230849106"></p><p>需要注意的时，在使用异常比例，异常数降级时，所指的异常默认是<code>BlockException</code>，需要指定其他异常需要调用<code>Tracer.trace(e)</code></p><p>而<code>ContextUtil</code>的<code>enter</code>和<code>exit</code>控制的是流控规则的针对来源。</p><h3 id="SentinelResource详解"><a href="#SentinelResource详解" class="headerlink" title="@SentinelResource详解"></a>@SentinelResource详解</h3><p>属性详解 <a href="https://www.imooc.com/article/289384">https://www.imooc.com/article/289384</a></p><p>使用注解与上面使用sentinel api实现上述不同点：</p><ul><li>Api方式实现，捕获除<code>BlockException</code>之外的异常需要使用<code>Tracer.trace()</code>,而使用注解的方式默认是捕获<code>Throwable</code>，<code>Class&lt;? extends Throwable&gt;[] exceptionsToTrace() default &#123;Throwable.class&#125;;</code></li><li>注解的方式不支持<code> ContextUtil.enter()</code>这种功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/test-sentinel-resource&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;test-sentinel-resource&quot;, blockHandler = &quot;blockHandler&quot;, fallback = &quot;fallbackHandler&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testSentinelResource</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(param)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;param is blank&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">blockHandler</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">    log.error(<span class="string">&quot;限流或降级&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;被限流或者降级了&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fallbackHandler</span><span class="params">(String param, Throwable ex)</span> </span>&#123;</span><br><span class="line">    log.error(<span class="string">&quot;被降级 : &#123;&#125;&quot;</span>, ex.getMessage());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;被降级了&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是，在配置降级规则后</p><p><img src="https://i.loli.net/2021/06/21/3AlxoqXHz4jV7JB.png" alt="image-20210621224015295"></p><p><img src="https://i.loli.net/2021/06/21/8zvXN1wH7YVy5qC.png" alt="image-20210621224053011"></p><p><code>fallback</code>回调函数中的异常为<code>java.lang.IllegalArgumentException: param is blank</code></p><p><code>blockHandler</code>回调函数<code>com.alibaba.csp.sentinel.slots.block.degrade.DegradeException</code></p><h2 id="RestTemplate整合Sentinel"><a href="#RestTemplate整合Sentinel" class="headerlink" title="RestTemplate整合Sentinel"></a>RestTemplate整合Sentinel</h2><p>注解：<code>@SentinelRestTemplate</code></p><p>整合的开关：<code>resttemplate.sentinel.enabled</code>默认为true</p><p>相关源码<code>com.alibaba.cloud.sentinel.custom.SentinelBeanPostProcessor</code></p><h2 id="Feign整合Sentinel"><a href="#Feign整合Sentinel" class="headerlink" title="Feign整合Sentinel"></a>Feign整合Sentinel</h2><p>整合的开关：<code>feign.sentinel.enabled</code>默认为false</p><p><img src="https://i.loli.net/2021/06/22/ro7W4YyZHkt5D3p.png" alt="image-20210622210158889"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;userCenter&quot;, path = &quot;user&quot;,</span></span><br><span class="line"><span class="meta">        configuration = UserCenterFeignClientConfig.class,</span></span><br><span class="line"><span class="meta">        fallbackFactory = UserCenterFeignClientFallBackFactory.class)</span></span><br></pre></td></tr></table></figure><p>需要注意的是 The fallback factory must be a valid spring bean.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCenterFeignClientFallBackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">UserCenterFeignClient</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserCenterFeignClient <span class="title">create</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserCenterFeignClient() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> UserDto <span class="title">getByID</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">paramTest</span><span class="params">(TestGetParam getParams, TestPostParam postParams)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;备用信息&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是这里的fallback其实与<code>@SentinelResource</code>的fallback类似，在<code>@SentinelResource</code>未指定blockHandler的情况下，行为一致，相比而言<code>@FeignClient</code>缺少单独的处理限流的类，不过可以通过判断<code>FallbackFactory</code>中的Throwable类型来判断，如果为<code>com.alibaba.csp.sentinel.slots.block.flow.FlowException</code>则为限流，此处可利用SpringBoot的全局异常处理机制实现限流抛出统一信息，降级给出自定义信息</p><h2 id="Sentinel扩展Api"><a href="#Sentinel扩展Api" class="headerlink" title="Sentinel扩展Api"></a>Sentinel扩展Api</h2><p><img src="https://i.loli.net/2021/06/29/1o4nYCcGdaPfRsu.png" alt="image-20210629220856174"></p><p>目前使用的<code>spring-cloud-alibaba</code>2.2.5版本的 相关源码已不在CommonFilter中，在<code>com.alibaba.csp.sentinel.adapter.spring.webmvc.AbstractSentinelInterceptor</code></p><h3 id="配置项-https-www-imooc-com-article-289562"><a href="#配置项-https-www-imooc-com-article-289562" class="headerlink" title="配置项 : https://www.imooc.com/article/289562"></a><strong>配置项</strong> : <a href="https://www.imooc.com/article/289562">https://www.imooc.com/article/289562</a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Sentinel&quot;&gt;&lt;a href=&quot;#Sentinel&quot; class=&quot;headerlink&quot; title=&quot;Sentinel&quot;&gt;&lt;/a&gt;Sentinel&lt;/h1&gt;&lt;h2 id=&quot;系统规则&quot;&gt;&lt;a href=&quot;#系统规则&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://example.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列-feign</title>
    <link href="http://example.com/2021/08/09/SpringCloud%E7%B3%BB%E5%88%97-feign/"/>
    <id>http://example.com/2021/08/09/SpringCloud%E7%B3%BB%E5%88%97-feign/</id>
    <published>2021-08-09T06:55:49.000Z</published>
    <updated>2021-08-09T06:58:57.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h1><blockquote><p>Netflix开源的声明书HTTP客户端</p></blockquote><h2 id="Feign组件"><a href="#Feign组件" class="headerlink" title="Feign组件"></a>Feign组件</h2><p><img src="https://i.loli.net/2021/06/14/HZeitIruzsXKBSv.png" alt="image-20210614180953699"></p><p><code>Feign.Builder</code> : 构建每一个<code>FeignClient</code></p><p><code>Client</code> :需要注意的是 <code>feign.Client.default</code>未使用连接池, 而<code>LoadBalancerFeignClient</code>在默认情况下可以看做是具有负载均衡功能的<code>FeignClient</code></p><h2 id="自定义Feign日志级别"><a href="#自定义Feign日志级别" class="headerlink" title="自定义Feign日志级别"></a>自定义Feign日志级别</h2><p><img src="https://i.loli.net/2021/06/14/i1X4OFNL5tEc3We.png" alt="image-20210614183749292"></p><h3 id="Java配置类的方式指定"><a href="#Java配置类的方式指定" class="headerlink" title="Java配置类的方式指定"></a>Java配置类的方式指定</h3><p>通过注解在FeignClient的<code>@FeignClient</code>的configuration属性中所配置<code>Logger.Level</code>类进行指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;userCenter&quot;, path = &quot;user&quot;, configuration = UserCenterFeignClientConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserCenterFeignClient</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserCenterFeignClientConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCenterFeignClientConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.<span class="function">Level <span class="title">level</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置属性的方式进行指定"><a href="#配置属性的方式进行指定" class="headerlink" title="配置属性的方式进行指定"></a>配置属性的方式进行指定</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">feign.client.config.userCenter.logger-level</span> = <span class="string">full</span></span><br></pre></td></tr></table></figure><h2 id="Feign的全局配置"><a href="#Feign的全局配置" class="headerlink" title="Feign的全局配置"></a>Feign的全局配置</h2><ul><li>Java代码方式</li><li>配置属性方式</li></ul><h3 id="Java代码方式"><a href="#Java代码方式" class="headerlink" title="Java代码方式"></a>Java代码方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = CustomDefaultFeignClientConfig.class)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDefaultFeignClientConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.<span class="function">Level <span class="title">level</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置属性方式"><a href="#配置属性方式" class="headerlink" title="配置属性方式"></a>配置属性方式</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">feign.client.config.default.logger-level</span> = <span class="string">full</span></span><br></pre></td></tr></table></figure><h3 id="支持的配置项"><a href="#支持的配置项" class="headerlink" title="支持的配置项"></a>支持的配置项</h3><h4 id="Java代码方式支持的"><a href="#Java代码方式支持的" class="headerlink" title="Java代码方式支持的"></a>Java代码方式支持的</h4><p><img src="https://i.loli.net/2021/06/14/DHnyiTLfa5gYAFs.png" alt="image-20210614193017702"></p><h4 id="配置属性方式支持的"><a href="#配置属性方式支持的" class="headerlink" title="配置属性方式支持的"></a>配置属性方式支持的</h4><p><img src="https://i.loli.net/2021/06/14/VDxoJd8waBjyY2c.png" alt="image-20210614193343242"></p><h4 id="Ribbon配置与Feign配置"><a href="#Ribbon配置与Feign配置" class="headerlink" title="Ribbon配置与Feign配置"></a>Ribbon配置与Feign配置</h4><p><img src="https://i.loli.net/2021/06/14/4mRXpnVuz7yqwcC.png"></p><h2 id="Feign性能优化"><a href="#Feign性能优化" class="headerlink" title="Feign性能优化"></a>Feign性能优化</h2><ul><li>连接池</li><li>日志级别</li></ul><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">feign.httpclient.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h2 id="Feign常见问题总结"><a href="#Feign常见问题总结" class="headerlink" title="Feign常见问题总结"></a><a href="https://www.imooc.com/article/289005">Feign常见问题总结</a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Feign&quot;&gt;&lt;a href=&quot;#Feign&quot; class=&quot;headerlink&quot; title=&quot;Feign&quot;&gt;&lt;/a&gt;Feign&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Netflix开源的声明书HTTP客户端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://example.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列-ribbon</title>
    <link href="http://example.com/2021/08/09/SpringCloud%E7%B3%BB%E5%88%97-ribbon/"/>
    <id>http://example.com/2021/08/09/SpringCloud%E7%B3%BB%E5%88%97-ribbon/</id>
    <published>2021-08-09T06:55:37.000Z</published>
    <updated>2021-08-09T06:59:04.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h1><blockquote><p>客户端负载均衡器</p></blockquote><p>Ribbon的依赖在nacos的依赖中已经存在</p><p>简单使用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解<code>@LoadBalanced</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用RestTemplate进行访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">restTemplates.getForObject(<span class="string">&quot;http://userCenter/user/getByID/&#123;id&#125;&quot;</span>, String.class, id);</span><br></pre></td></tr></table></figure><p>userCenter为service名称，RestTemplate在进行访问时对其进行替换来实现客户端负载均衡</p><p><img src="https://i.loli.net/2021/06/13/GxmZEfTn8b7QhS4.png" alt="image-20210613130813409"></p><p>​                                                                                                            </p><p>Ribbon内置的负载均衡规则</p><p><img src="https://i.loli.net/2021/06/13/AkVQdDCaHsN473W.png" alt="image-20210613133230605"></p><p>默认的是<code>ZoneAvoidanceRule</code>,Zone是机房的含义,在没有机房设置的情况下,相当于<code>RoundRobinRule</code></p><h2 id="细粒度配置自定义"><a href="#细粒度配置自定义" class="headerlink" title="细粒度配置自定义"></a>细粒度配置自定义</h2><blockquote><p>可以根据service的不同设置不同的规则</p></blockquote><ul><li>Java代码配置</li><li>配置属性配置</li></ul><h3 id="Java代码配置"><a href="#Java代码配置" class="headerlink" title="Java代码配置"></a>Java代码配置</h3><p>RibbonUserCenterConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RibbonClient(name = &quot;userCenter&quot;,configuration = RibbonConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonUserCenterConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RibbonConfiguration.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">randomRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@RibbonClient</code>的name属性为服务名，RibbonConfiguration属性指的是调用该服务时所使用的配置类</p><p>需要注意的是配置Ribbon组件的配置类不能被Spring容器扫描到，否则会成为全局的一个配置类，这是个父子上下文的问题。在实际运用中，应尽量避免上下文重叠的情况出现， </p><p><strong>实现ribbon全局配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RibbonClients(defaultConfiguration = RibbonConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonUserCenterConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置属性方式"><a href="#配置属性方式" class="headerlink" title="配置属性方式"></a>配置属性方式</h3><p><img src="https://i.loli.net/2021/06/13/HluvLqNUiRW3cxQ.png" alt="image-20210613144028157"></p><p><img src="https://i.loli.net/2021/06/13/Lmxji4OXVy68lGM.png" alt="image-20210613145421612"></p><h2 id="饥饿加载"><a href="#饥饿加载" class="headerlink" title="饥饿加载"></a>饥饿加载</h2><pre><code>默认情况下，Ribbon是懒加载的。即RestTemplate第一次访问`http://userCenter/user/geByID/1`时才会创建一个userCenter的RibbonClient。通过下面配置打开饥饿加载</code></pre><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ribbon.eager-load.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#为哪些client打开饥饿加载</span></span><br><span class="line"><span class="meta">ribbon.eager-load.clients</span>=<span class="string">userCenter,service1</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/13/pmvfiKLqWlV95A8.png" alt="image-20210613164121848">**</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ribbon&quot;&gt;&lt;a href=&quot;#Ribbon&quot; class=&quot;headerlink&quot; title=&quot;Ribbon&quot;&gt;&lt;/a&gt;Ribbon&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;客户端负载均衡器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ribbon的依赖在n</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://example.com/tags/SpringCloud/"/>
    
  </entry>
  
</feed>
